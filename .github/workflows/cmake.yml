name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
jobs:
   ubuntu_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - run: sudo apt-get update && sudo apt-get install libgtest-dev
      - run: wget -q --no-check-certificate https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-2.7.0.tar.gz
      - run: sudo tar -C /usr/local -xzf libtensorflow-cpu-linux-x86_64-2.7.0.tar.gz
      - run: sudo ldconfig /usr/local/lib
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: cmake --build . --target test
      - run: cmake --build . --target package
      - name: Create Ubuntu Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Ubuntu-${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
      - name: Upload Ubuntu Release Asset
        id: upload-ubuntu-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./fashio_mnist-0.0.${{ github.run_number }}-Linux.deb
          asset_name: fashio_mnist-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package        
   windows_build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Googletest installer
        uses: MarkusJx/googletest-installer@v1.1
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DGTEST_LIBRARY="D:/gtest/lib/gtest.lib" -DGTEST_INCLUDE_DIR="D:/gtest/include" -DGTEST_MAIN_LIBRARY="D:/gtest/lib/gtest_main.lib"
      - run: cmake --build . --config Release
      - run: cmake --build . --target RUN_TESTS --config Release
      - name: Create Windows Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Windows-${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
      - name: Upload Windows Release Asset
        id: upload-windows-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/Release/ip_filter.exe
          asset_name: ip_filter-0.0.${{ github.run_number }}.exe
          asset_content_type: application/zip
